{"version":3,"file":"assets/js/459.index.js","mappings":";wMAIO,SAASA,IACd,OAAOC,EAAAA,EAAAA,IAHQ,SCCjB,IAAMC,EAAUC,IAAAA,OAAa,CAC3BC,QAASC,wCAETC,QAAS,OAIXJ,EAAQK,aAAaC,QAAQC,KAC3B,SAACC,GACC,IAAMC,EAASD,EAUf,OARAC,EAAOC,QAAQ,+BAAiC,IAC5CZ,MAIFW,EAAOC,QAAP,gCAA6CZ,MAGxCW,KAET,SAACE,GAGC,OADAC,QAAQC,IAAIF,GACLG,QAAQC,OAAOJ,MAK1BX,EAAQK,aAAaW,SAAST,KAC5B,SAACS,GAKC,OAJYA,EAASC,QAMvB,SAACN,GACC,GAAIA,EAAMK,SAAU,CAClB,IAAME,EAAUP,EAAMK,SAASC,KAER,MAAnBC,EAAQC,QAAoC,kBAAlBD,EAAQP,MACpCC,QAAQC,IAAI,aAGZD,QAAQC,IAAI,eAGdD,QAAQC,IAAI,6BAEd,OAAOC,QAAQC,OAAOJ,MAI1B,UCvDA,IAAMD,EAAU,CAAE,eAAgB,iRCDlC,8hGAAAU,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,ggDA8BA,QA3Ba,WACX,SAA0BC,EAAAA,EAAAA,UAAS,IAAnC,GAAOC,EAAP,KAAcC,EAAd,KACA,KAAwBF,EAAAA,EAAAA,WAAS,GAAjC,GAAOG,EAAP,KAAaC,EAAb,KACMC,GAAWC,EAAAA,EAAAA,aAAW,YAAC,oGAEzBF,GAAQ,GAFiB,cDDvBhB,IAAS,CAAEC,QAAAA,EAASkB,YCIJC,GDHfvB,EAAQwB,IAFH,QAEYrB,GCAK,OAGnBsB,EAHmB,OAIzBR,EAASQ,GAJgB,gDAMzBnB,QAAQC,IAAR,MANyB,yBAQzBY,GAAQ,GARiB,+CDHxB,IAEChB,ICCuB,0BAU1B,IAEH,OACE,gBAAC,KAAD,CAAKuB,GAAG,UAAUC,EAAE,MAClB,gBAAC,KAAD,CAASD,GAAG,MAAZ,sBACA,2BACA,gBAAC,KAAD,CAAQE,QAASR,GAAjB,YACA,2BACA,2BACCF,EAAO,gBAAC,IAAD,MAAc,gBAAC,KAAD,KAAgBF,GAASA,EAAMa,KAAI,SAACF,GAAD,OAAO,gBAAC,KAAD,CAAUG,IAAKH,EAAEI,IAAKJ,EAAEK","sources":["webpack://react18/./src/utils/auth.js","webpack://react18/./src/utils/request.js","webpack://react18/./src/api/HTTP.js","webpack://react18/./src/pages/HTTP/index.jsx"],"sourcesContent":["import Cookies from 'js-cookie'\r\n\r\nconst TokenKey = 'Admin'\r\n\r\nexport function getToken() {\r\n  return Cookies.get(TokenKey)\r\n}\r\n\r\nexport function setToken(token) {\r\n  return Cookies.set(TokenKey, token, { expires: 7 })\r\n}\r\n\r\nexport function removeToken() {\r\n  return Cookies.remove(TokenKey)\r\n}\r\n","import axios from 'axios'\r\nimport { getToken } from 'utils/auth'\r\n\r\nconst service = axios.create({\r\n  baseURL: process.env.API_URL, // url = base url + request url\r\n  // withCredentials: true, // send cookies when cross-domain requests\r\n  timeout: 180000, // request timeout (3분)\r\n})\r\n\r\n// request interceptor\r\nservice.interceptors.request.use(\r\n  (_config) => {\r\n    const config = _config\r\n    // do something before request is sent\r\n    config.headers['Access-Control-Allow-Origin'] = '*'\r\n    if (getToken()) {\r\n      // let each request carry token\r\n      // ['X-Token'] is a custom headers key\r\n      // please modify it according to the actual situation\r\n      config.headers['Authorization'] = `Bearer  ${getToken()}`\r\n    }\r\n    // console.log(config);\r\n    return config\r\n  },\r\n  (error) => {\r\n    // do something with request error\r\n    console.log(error) // for debug\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// response interceptor\r\nservice.interceptors.response.use(\r\n  (response) => {\r\n    const res = response.data\r\n\r\n    // Custom Code\r\n\r\n    return res\r\n  },\r\n  (error) => {\r\n    if (error.response) {\r\n      const errData = error.response.data\r\n      // 로그인 세션 만료\r\n      if (errData.status === 401 || errData.error === 'invalid_token') {\r\n        console.log('로그인 세션 만료')\r\n      } else {\r\n        // 이외의 오류\r\n        console.log('이외의 오류')\r\n      }\r\n    } else {\r\n      console.log('네트워크 오류입니다. 관리자에게 문의해주세요.')\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default service\r\n","import request from 'utils/request'\r\n\r\nconst headers = { 'Content-Type': 'application/json' }\r\n\r\nexport function getPostList(params) {\r\n  const url = 'posts'\r\n  const config = { headers, params }\r\n  return request.get(url, config)\r\n}\r\n","import { useState, useCallback } from 'react'\r\nimport { ListItem, UnorderedList, Spinner, Button, Box, Heading } from '@chakra-ui/react'\r\nimport { getPostList } from 'api/HTTP'\r\n\r\nconst HTTP = () => {\r\n  const [posts, setPosts] = useState([])\r\n  const [load, setLoad] = useState(false)\r\n  const getPosts = useCallback(async () => {\r\n    try {\r\n      setLoad(true)\r\n      const res = await getPostList()\r\n      setPosts(res)\r\n    } catch (e) {\r\n      console.log(e)\r\n    } finally {\r\n      setLoad(false)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <Box as=\"section\" p=\"10\">\r\n      <Heading as=\"h1\">HTTP Request Usage</Heading>\r\n      <br />\r\n      <Button onClick={getPosts}>Get Post</Button>\r\n      <br />\r\n      <br />\r\n      {load ? <Spinner /> : <UnorderedList>{posts && posts.map((p) => <ListItem key={p.id}>{p.title}</ListItem>)}</UnorderedList>}\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default HTTP\r\n"],"names":["getToken","Cookies","service","axios","baseURL","process","timeout","interceptors","request","use","_config","config","headers","error","console","log","Promise","reject","response","data","errData","status","i","useState","posts","setPosts","load","setLoad","getPosts","useCallback","params","getPostList","get","res","as","p","onClick","map","key","id","title"],"sourceRoot":""}